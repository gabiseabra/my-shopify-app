/* This code is generated by GraphQL Codegen. Do not edit manually. */

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  HTML: { input: any; output: any; }
  URL: { input: any; output: any; }
};

export type Count = {
  __typename?: 'Count';
  /** The count of elements. */
  count: Scalars['Int']['output'];
  /** The count's precision, or the exactness of the value. */
  precision: CountPrecision;
};

/** The precision of the value returned by a count field. */
export enum CountPrecision {
  /** The count is at least the value. A limit was imposed and reached. */
  AtLeast = 'AT_LEAST',
  /** The count is exactly the value. */
  Exact = 'EXACT'
}

/** Represents an image resource. */
export type Image = {
  __typename?: 'Image';
  /** The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify. */
  height?: Maybe<Scalars['Int']['output']>;
  /** A unique ID for the image. */
  id?: Maybe<Scalars['ID']['output']>;
  /** The location of the image as a URL. */
  url: Scalars['URL']['output'];
  /** The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify. */
  width?: Maybe<Scalars['Int']['output']>;
};

/** Represents a media interface. */
export type Media = {
  __typename?: 'Media';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']['output']>;
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /** The media content type. */
  mediaContentType: MediaContentType;
  /** The preview image for the media. */
  preview?: Maybe<MediaPreviewImage>;
  /** Current status of the media. */
  status: MediaStatus;
};

/** The possible content types for a media object. */
export enum MediaContentType {
  /** An externally hosted video. */
  ExternalVideo = 'EXTERNAL_VIDEO',
  /** A Shopify-hosted image. */
  Image = 'IMAGE',
  /** A 3d model. */
  Model_3D = 'MODEL_3D',
  /** A Shopify-hosted video. */
  Video = 'VIDEO'
}

/** Represents the preview image for a media. */
export type MediaPreviewImage = {
  __typename?: 'MediaPreviewImage';
  /** The preview image for the media. Returns `null` until `status` is `READY`. */
  image?: Maybe<Image>;
  /** Current status of the preview image. */
  status: MediaPreviewImageStatus;
};

/** The possible statuses for a media preview image. */
export enum MediaPreviewImageStatus {
  /** Preview image processing has failed. */
  Failed = 'FAILED',
  /** Preview image is being processed. */
  Processing = 'PROCESSING',
  /** Preview image is ready to be displayed. */
  Ready = 'READY',
  /** Preview image is uploaded but not yet processed. */
  Uploaded = 'UPLOADED'
}

/** The possible statuses for a media object. */
export enum MediaStatus {
  /** Media processing has failed. */
  Failed = 'FAILED',
  /** Media is being processed. */
  Processing = 'PROCESSING',
  /** Media is ready to be displayed. */
  Ready = 'READY',
  /** Media has been uploaded but not yet processed. */
  Uploaded = 'UPLOADED'
}

export type Mutation = {
  __typename?: 'Mutation';
  /**
   * Creates a product.
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productCreate?: Maybe<Product>;
  /**
   * Updates a product.
   *
   * For versions `2024-01` and older:
   * If you update a product and only include some variants in the update,
   * then any variants not included will be deleted.
   *
   * To safely manage variants without the risk of
   * deleting excluded variants, use
   * [productVariantsBulkUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantsbulkupdate).
   *
   * If you want to update a single variant, then use
   * [productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
   */
  productUpdate?: Maybe<Product>;
};


export type MutationProductCreateArgs = {
  product?: InputMaybe<ProductInput>;
};


export type MutationProductUpdateArgs = {
  id: Scalars['ID']['input'];
  product?: InputMaybe<ProductInput>;
};

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 * For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** The cursor corresponding to the last node in edges. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** Whether there are more pages to fetch following the current page. */
  hasNextPage: Scalars['Boolean']['output'];
  /** Whether there are any pages prior to the current page. */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** The cursor corresponding to the first node in edges. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can
 * include various details such as title, description, price, images, and options
 * such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant)
 * to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export type Product = {
  __typename?: 'Product';
  /**
   * A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
   * returns the single next record, sorted ascending by ID.
   */
  defaultCursor: Scalars['String']['output'];
  /**
   * The description of the product, with
   * HTML tags. For example, the description might include
   * bold `<strong></strong>` and italic `<i></i>` text.
   */
  descriptionHtml: Scalars['HTML']['output'];
  /**
   * The featured [media](https://shopify.dev/docs/apps/build/online-store/product-media)
   * associated with the product.
   */
  featuredMedia?: Maybe<Media>;
  /**
   * A unique, human-readable string of the product's title. A handle can contain
   * letters, hyphens (`-`), and numbers, but no spaces.
   * The handle is used in the online store URL for the product.
   */
  handle: Scalars['String']['output'];
  /** A globally-unique ID. */
  id: Scalars['ID']['output'];
  /**
   * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
   * that are associated with a product.
   */
  seo: Seo;
  /**
   * The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
   * which controls visibility across all sales channels.
   */
  status: ProductStatus;
  /**
   * The name for the product that displays to customers. The title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses", then the handle is `black-sunglasses`.
   */
  title: Scalars['String']['output'];
};

/** An auto-generated type for paginating through multiple Products. */
export type ProductConnection = {
  __typename?: 'ProductConnection';
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ProductEdge>;
  /**
   * A list of nodes that are contained in ProductEdge. You can fetch data about an
   * individual node, or you can follow the edges to fetch data about a collection
   * of related nodes. At each node, you specify the fields that you want to retrieve.
   */
  nodes: Array<Product>;
  /**
   * An object that’s used to retrieve [cursor
   * information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
   */
  pageInfo: PageInfo;
};

/** An auto-generated type which holds one Product and a cursor during pagination. */
export type ProductEdge = {
  __typename?: 'ProductEdge';
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars['String']['output'];
  /** The item at the end of ProductEdge. */
  node: Product;
};

export type ProductInput = {
  /**
   * The description of the product, with HTML tags.
   * For example, the description might include bold `<strong></strong>` and italic `<i></i>` text.
   */
  descriptionHtml?: InputMaybe<Scalars['String']['input']>;
  /**
   * A unique, human-readable string of the product's title. A handle can contain
   * letters, hyphens (`-`), and numbers, but no spaces.
   * The handle is used in the online store URL for the product.
   * For example, if a product is titled "Black Sunglasses", then the handle is `black-sunglasses`.
   */
  handle?: InputMaybe<Scalars['String']['input']>;
  /**
   * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
   * that are associated with a product.
   */
  seo?: InputMaybe<SeoInput>;
  /**
   * The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
   * which controls visibility across all sales channels.
   */
  status?: InputMaybe<ProductStatus>;
  /**
   * The name for the product that displays to customers. The title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses", then the handle is `black-sunglasses`.
   */
  title?: InputMaybe<Scalars['String']['input']>;
};

export enum ProductSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `inventory_total` value. */
  InventoryTotal = 'INVENTORY_TOTAL',
  /** Sort by the `product_type` value. */
  ProductType = 'PRODUCT_TYPE',
  /** Sort by the `published_at` value. */
  PublishedAt = 'PUBLISHED_AT',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * [Pagination](https://shopify.dev/api/usage/pagination-graphql) isn't supported when using this sort key.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `title` value. */
  Title = 'TITLE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT',
  /** Sort by the `vendor` value. */
  Vendor = 'VENDOR'
}

/** The possible product statuses. */
export enum ProductStatus {
  /**
   * The product is ready to sell and can be published to sales channels and apps.
   * Products with an active status aren't automatically published to sales
   * channels, such as the online store, or apps. By default, existing products are set to active.
   */
  Active = 'ACTIVE',
  /** The product is no longer being sold and isn't available to customers on sales channels and apps. */
  Archived = 'ARCHIVED',
  /**
   * The product isn't ready to sell and is unavailable to customers on sales
   * channels and apps. By default, duplicated and unarchived products are set to draft.
   */
  Draft = 'DRAFT'
}

export type Query = {
  __typename?: 'Query';
  /** Returns a Product resource by ID. */
  product?: Maybe<Product>;
  /** Returns a list of products. */
  products: ProductConnection;
  /** Count of products. Limited to a maximum of 10000. */
  productsCount?: Maybe<Count>;
};


export type QueryProductArgs = {
  id: Scalars['ID']['input'];
};


export type QueryProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortKey?: InputMaybe<ProductSortKeys>;
};


export type QueryProductsCountArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};

/** SEO information. */
export type Seo = {
  __typename?: 'SEO';
  /** SEO Description. */
  description?: Maybe<Scalars['String']['output']>;
  /** SEO Title. */
  title?: Maybe<Scalars['String']['output']>;
};

/** The input fields for SEO information. */
export type SeoInput = {
  /** SEO description of the product. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** SEO title of the product. */
  title?: InputMaybe<Scalars['String']['input']>;
};
